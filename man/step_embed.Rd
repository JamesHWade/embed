% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/glm.R
\name{step_embed}
\alias{step_embed}
\alias{tidy.step_embed}
\title{Encoding Factors into Linear Functions}
\usage{
step_embed(recipe, ..., role = NA, trained = FALSE, outcome = NULL,
  mapping = NULL, skip = FALSE)

\method{tidy}{step_embed}(x, ...)
}
\arguments{
\item{recipe}{A recipe object. The step will be added to the
sequence of operations for this recipe.}

\item{...}{One or more selector functions to choose variables.
For \code{step_embed}, this indicates the variables to be encoded
into a numeric format. See \code{\link[recipes:selections]{recipes::selections()}} for more details. For
the \code{tidy} method, these are not currently used.}

\item{role}{Not used by this step since no new variables are
created.}

\item{trained}{A logical to indicate if the quantities for
preprocessing have been estimated.}

\item{outcome}{A call to \code{vars} to specify which variable is
used as the outcome in the generalized linear model. Only
numeric and two-level factors are currently supported.}

\item{mapping}{A list of tibble results that define the
encoding. This is \code{NULL} until the step is trained by
\code{\link[recipes:prep.recipe]{recipes::prep.recipe()}}.}

\item{skip}{A logical. Should the step be skipped when the
recipe is baked by \code{\link[recipes:bake.recipe]{recipes::bake.recipe()}}? While all operations are baked
when \code{\link[recipes:prep.recipe]{recipes::prep.recipe()}} is run, some operations may not be able to be
conducted on new data (e.g. processing the outcome variable(s)).
Care should be taken when using \code{skip = TRUE} as it may affect
the computations for subsequent operations}

\item{x}{A \code{step_embed} object.}
}
\value{
An updated version of \code{recipe} with the new step added
to the sequence of existing steps (if any). For the \code{tidy}
method, a tibble with columns \code{terms} (the selectors or
variables for encoding), \code{level} (the factor levels), and
\code{value} (the encodings).
}
\description{
\code{step_embed} creates a \emph{specification} of a recipe step that
will convert a nominal (i.e. factor) predictor into a single set of
scores derived from a generalized linear models.
}
\details{
For each factor predictor, a generlaized linear model is fit to the
outcome and the coefficients are returned as the encoding. These coefficients
are on the linear predictor scale so, for factor outcomes, they are in
log-odds units. The coefficients are created using a no intercept model and,
when two factor outcomes are used, the log-odds reflect the event of interest
being the \emph{first} level of the factor.

For novel levels, the average of the coeffcients is returned.
}
\examples{
library(recipes)
library(dplyr)

data(okc)

not_pooled <- recipe(Class ~ age + location, data = okc) \%>\%
  step_embed(location, outcome = vars(Class))

# see pkgdown url for more examples
}
\references{
Zumel N and Mount J (2017) "vtreat: a data.frame Processor for
Predictive Modeling," arXiv:1611.09477
}
\concept{
preprocessing encoding
}
\keyword{datagen}
